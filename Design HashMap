// Time Complexity : O(1)/O(N) for constructor
// Space Complexity : O(N)
// Did this code successfully run on Leetcode : yes
// Any problem you faced while coding this : none


// Your code here along with comments explaining your approach
This one was similar to the hashset problem for me. I set all the values to -1 in the constructor so that a default value can be returned if nothing is added to the hashmap. Other than that, put just sets the value at the
index key to value, get returns the value corresponding to the index key, and removing just sets values[key] to -1 so as to set it back to the default mapping.

class MyHashMap {
    private int[] values;

    public MyHashMap() {
        values = new int[1000001];
        for(int i=0; i<values.length; i++){
            values[i]=-1;
        }
    }
    
    public void put(int key, int value) {
        values[key]=value;
    }
    
    public int get(int key) {
        return values[key];
    }
    
    public void remove(int key) {
        values[key]=-1;
    }
}

/**
 * Your MyHashMap object will be instantiated and called as such:
 * MyHashMap obj = new MyHashMap();
 * obj.put(key,value);
 * int param_2 = obj.get(key);
 * obj.remove(key);
 */
